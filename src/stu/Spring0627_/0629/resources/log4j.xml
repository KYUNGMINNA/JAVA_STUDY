<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
		자바를 이용한 백엔드 로직을 작성하다보면 , 결과를 확인하기 위해 
		System.out.println()을 사용해 왔다.
		System.out.println() 단순 출력 이상의 기능을 수행할 수 없기 때문에 
		로그에 대한 다양한 기능을 제공하는 log4j라이브러리를 사용합니다.
	
	 -->






	<!-- Appenders -->
	<!-- appenders  : 로그의 출력위치가 어디인지(파일 ,콘솔 ,DB 등등)을 결정 합니다   -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<!-- layout :출력 형식을 결정  :공식 라이브러리 내용을 보면 잘 나와있음 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	 
	 
	 <!-- 날짜별 로그 파일 생성 -->
	 <!-- 설정한 기간 단위로 새 파일을 만들어 로그 메시지를 기록합니다. -->
    <appender name="rollingFile" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="C:/LOG/all.log"/>
        <param name="Append" value="true"/>
        <!-- param name="MaxFileSize" value="100MB"/ -->
        <!-- param name="MaxBackupIndex" value="2"></param -->
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <!-- 주로 많이 사용되는 패턴 종류 (이외에도 다양하다)
        	%p ->로그 레벨 출력(info,error,warn ... )
        	%m ->로그 메세지 출력 
        	$c ->전체 패키지명 또는 파일 이름  ( %C ->클래스 이름)
        	$d ->이벤트 발생 시각 (yyyy-MM-dd  HH:mm:ss)
        	숫자 : 공백 , 글자가 차지할 공간.  음수로 주면 좌측정렬, 양수면 우측 정렬
        
         -->
        
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %p [%C{10}] %m [%X{userId}]%n" />
        </layout>  
    </appender>
	
	
	<!-- 날짜별 로그 파일 생성(에러만) -->
    <appender name="errFile" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="Threshold" value="ERROR"/>
        <param name="File" value="C:/LOG/error.log"/>
        <param name="Append" value="true"/>
        <!-- param name="MaxFileSize" value="100MB"/ -->
        <!-- param name="MaxBackupIndex" value="2"></param -->
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %5p [%C{1}] %m [%X{userId}]%n" />
        </layout>  
    </appender>
	
	
	<!--  
		log4j의 여러가지 로그 레벨  logger.info 이런식으로 호출 
		FATAL -가장 높음  -가장 심각한 문제가 발생할 때 사용 
		ERROR -문제가 발생한 상태
		WARN -오류의 원인이 될 수 있는 메세지
		INFO -상태 변경 같은 실제 어플리케이션의 운영과 관련된 로직  : 가장 많이 사용
		DEBUG -디버깅 용도 
		TRACE -가장 낮음 - 가장 상세한 로깅 정보를 출력 
		
		
		밑에 태그에  <level value="error">로 설정해 두었다면 
		LogAdvice 클래스에서 logger.info 라고 선언한 메서드들은 실행안된다 : error가 더 높은 레벨이라서 
		error 이상 ,error .fatal 만 출력 함 
	 -->
	
	
	
	
	<!-- AOP 패키지를 로그 레벨로 추가  -->
	<logger  name="com.spring.myweb.util.aop">
		<level value="info"/>
	
	</logger>
	
	
	
	<!-- Application Loggers -->
	<logger name="com.spring.myweb">
		<level value="info" />
	</logger>
	
	<!-- 없어도 정상적으로 동작 됨  -->
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- SQL Logger   |||additivity=false   :: 중복된 내용을 제거하라는 의미 -->
	<!-- DB연결에 관련된 이벤트를 기록하는 Logger (Connection pool 등)  
		info 보다는 , warn 이나 error가 적절하다(문제가 발생할시에만 나타나면 되기 때문)  -->
	<logger name="jdbc.connection" additivity="false">
		<level  value="warn"/>
		<appender-ref ref="console" /> <!-- 출력되는 장소 console -->
	</logger>
	
	<!-- ResultSet를 제외한 모든 JDBC 호출 내역을 기록. -->
	<logger name="jdbc.audit" additivity="false">
		<level  value="warn"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- ResultSet을  포함한 모든 JDBC 호출 내역을 기록  -->
	<logger name="jdbc.resultset" additivity="false">
		<level  value="warn"/>
		<appender-ref ref="console" />
	</logger>
	
	<!--SQL문만 기록 ( ?값이 드러납니다.  :어떤 파라미터전달했는지 앎)   -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level  value="info"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- table 모양으로 조회된 내용을 기록합니다. -->
	<logger name="jdbc.resultsettable" additivity="false">
		<level  value="info"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- 해당 SQL을 실행시키는데 소요된 시간정보를 기록(밀리초) -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level  value="info"/>
		<appender-ref ref="console" />
	</logger>




	<!-- Root Logger -->
	<root>
		<!-- priority value ="warn" ->info -->
		<priority value="info" />
		<appender-ref ref="console" />
		
		<!-- appender 등록하기  -->
		<appender-ref ref="errFile"/>		
		<appender-ref ref="rollingFile"/>		
		
		
		
	</root>
	
</log4j:configuration>
